var $ = Dom7;
var device = Framework7.getDevice();
var submitFileName = "submits.json";
var submits = [];
var fileEntryGlobal = null;

var app = new Framework7({
  name: 'My App',
  theme: 'auto',
  el: '#app',
  id: 'io.framework7.myapp',
  store: store,
  routes: routes,
  input: {
    scrollIntoViewOnFocus: device.cordova && !device.electron,
    scrollIntoViewCentered: device.cordova && !device.electron,
  },
  statusbar: {
    iosOverlaysWebView: true,
    androidOverlaysWebView: false,
  },
  on: {
    init: function () {
      if (this.device.cordova) {
        document.addEventListener('deviceready', onDeviceReady, false);
      }
    },
  },
});

function onDeviceReady() {
  getFileEntry(true, fileEntry => {
    fileEntryGlobal = fileEntry;
    readFile(fileEntry, content => {
      try { submits = JSON.parse(content); } catch (_) { submits = []; }
    });
  });
}

function onError(err) {
  console.error("File error:", err);
  app.dialog.alert('Грешка при достъп до файловата система.');
}

function getFileEntry(create, callback) {
  window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, fs => {
    fs.root.getFile(submitFileName, { create }, callback, onError);
  }, onError);
}

function readFile(fileEntry, callback) {
  fileEntry.file(file => {
    const reader = new FileReader();
    reader.onloadend = () => callback(reader.result);
    reader.readAsText(file);
  });
}

function writeFile(fileEntry, content, onSuccess) {
  fileEntry.createWriter(writer => {
    writer.onwriteend = () => onSuccess && onSuccess();
    writer.write(new Blob([content], { type: 'text/plain' }));
  }, onError);
}

function saveSubmitsJson() {
  getFileEntry(true, fileEntry => {
    writeFile(fileEntry, JSON.stringify(submits), () => {
      app.dialog.alert('Успешно изпратено!');
    });
  });
}

function collectAnswers() {
  const name = $('input[name="name"]').val().trim();
  if (!name) return app.dialog.alert("Моля, въведете име.");
  if (submits.some(s => s.name.toLowerCase() === name.toLowerCase()))
    return app.dialog.alert("Потребителят вече е изпратил отговор.");

  const answers = { name };
  $('[name^="question_"]').each(function () {
    if ((this.type === "radio" && this.checked) || this.type === "text") {
      answers[this.name] = this.value;
    }
  });

  submits.push(answers);
  saveSubmitsJson();
}

$('body').on('click', 'button[type="submit"]', e => {
  e.preventDefault();
  collectAnswers();
});

fetch('questions.json')
  .then(res => res.json())
  .then(generateQuestions)
  .catch(err => console.error('Error loading questions:', err));

function generateQuestions(questions) {
  const container = $('.block-strong').html('');
  questions.forEach(q => {
    const wrapper = $('<div class="question-block"></div>');
    wrapper.append(`<p><strong>${q.number}. ${q.question}</strong></p>`);

    if (q.type === 'text') {
      wrapper.append(`<div class="list no-hairlines-md"><ul><li class="item-content item-input">
        <div class="item-inner"><div class="item-input-wrap">
        <input type="text" name="question_${q.number}" placeholder="Вашият отговор..." required>
        </div></div></li></ul></div>`);
    } else if (q.type === 'radio') {
      const list = $('<div class="list"><ul></ul></div>');
      q.options.forEach(opt => {
        list.find('ul').append(`<li><label class="item-radio item-content">
          <input type="radio" name="question_${q.number}" value="${opt}">
          <i class="icon icon-radio"></i>
          <div class="item-inner"><div class="item-title">${opt}</div></div>
        </label></li>`);
      });
      wrapper.append(list);
    }

    container.append(wrapper);
  });
}

// View All Submissions
function showSubmissions() {
  getFileEntry(false, fileEntry => {
    readFile(fileEntry, content => {
      try {
        const data = JSON.parse(content);
        const text = data.map(d => JSON.stringify(d)).join('\n\n') || "No data.";
        app.dialog.alert(text);
      } catch (_) {
        app.dialog.alert("Invalid JSON.");
      }
    });
  });
}

// Delete File
function deleteSubmissionsFile() {
  if (!fileEntryGlobal) return app.dialog.alert("Файлът не е намерен.");
  fileEntryGlobal.remove(() => {
    submits = [];
    fileEntryGlobal = null;
    app.dialog.alert("Файлът беше успешно изтрит.");
  }, err => {
    console.error("Грешка при изтриване:", err);
    app.dialog.alert("Грешка при изтриване на файла.");
  });
}

// Show Answers for a Question
function showAnswersForQuestionKey(key, number) {
  getFileEntry(false, fileEntry => {
    readFile(fileEntry, content => {
      try {
        const data = JSON.parse(content);
        const answers = data.map(s => `${s.name}: ${s[key] || 'Няма отговор'}`);
        const output = answers.join('<br><hr>') || "Няма отговори.";
        app.dialog.alert(output, `Отговори на въпрос ${number}`);
      } catch (_) {
        app.dialog.alert("Файлът не може да се прочете.");
      }
    });
  });
}

// Button bindings
$('body').on('click', '.delete-submissions-file', () => {
  app.dialog.confirm("Сигурни ли сте, че искате да изтриете файла с всички отговори?", deleteSubmissionsFile);
});

$('body').on('click', '.show-question-answers', () => {
  app.dialog.prompt('Въведете номера на въпроса:', qNum => {
    if (!qNum || isNaN(qNum)) return app.dialog.alert('Моля, въведете валиден номер на въпрос.');
    showAnswersForQuestionKey(`question_${qNum.trim()}`, qNum.trim());
  });
});